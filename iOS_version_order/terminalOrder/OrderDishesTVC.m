//
//  OrderDishesTVC.m
//  terminalOrder
//
//  Created by ren will on 06/04/2017.
//  Copyright Â© 2017 ren will. All rights reserved.
//

#import "OrderDishesTVC.h"
#import "NetResource.h"
#import "IntroductionRestaurantCell.h"
#import "DBManager.h"
#import "UserDataManager.h"
#import "MenuDishSelectedTVC.h"
#import "OrderHistoryData.h"
#import "UserConfigurationData.h"

@interface OrderDishesTVC ()
@property (nonatomic, copy) NSMutableDictionary *sortedDic;
@property (nonatomic, copy) NSMutableArray *sortedArr;
@property (nonatomic, strong) UserDataManager *userData;
@property (weak, nonatomic) IBOutlet UIBarButtonItem *btnBarDone;
@property (nonatomic, copy) NSMutableArray *dishList;
@end

@implementation OrderDishesTVC
@synthesize restID;
@synthesize sortedDic;
@synthesize sortedArr;
@synthesize introduction;
@synthesize userData;
@synthesize selectedDishesList;
@synthesize btnBarDone;
@synthesize restName;
@synthesize dishList;

- (void)downloadDishMenubyRestID{
    NSURLSession *session = [NSURLSession sharedSession];
    NSString *urlGetRestaurant = [NSString stringWithFormat:@"%@%@%@",AWSURLBASE,GETMENUDATABYRESTID,restID];
    NSURL *url  = [NSURL URLWithString:urlGetRestaurant];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];

    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        if(!error)
        {
            //deal with NSData format data, convert NSData to JSon format
            NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];
            NSLog(@"%@",dic);
            NSArray *arrResult = [[NSArray alloc]initWithArray:[dic objectForKey:@"listMenudata"]];
            NSDictionary *tmpDic = [arrResult firstObject];
            NSString *tmpRestID = [tmpDic objectForKey:@"restID"];
            if ([tmpRestID isEqualToString:restID]) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    [self convertNetworkdata2SortedDictionary:arrResult];
                    DBManager *db = [DBManager getDBManagerInstance];
                    //[db insertArray:arrResult IntoTable:DATABASEDISHTABLE];
                    [db insertArray:arrResult IntoTable:DATABASEDISHTABLE WithPrimaryKey:@"dishIDAutoGenerated"];
                    [userData.arrDishListByRestID addObject:restID];
                    [self.tableView reloadData];
                });
            }
            else{
                DBManager *db = [DBManager getDBManagerInstance];
                [db insertArray:arrResult IntoTable:DATABASEDISHTABLE];
                [userData.arrDishListByRestID addObject:tmpRestID];
            }
        }
    }
    ];
    [task resume];
}
- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
    
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
    UIBarButtonItem *newBackButton = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStylePlain target:self action:@selector(onClickBack:)];
    self.navigationItem.leftBarButtonItem = newBackButton;
    [self.tableView registerNib:[UINib nibWithNibName:@"IntroductionRestaurantCell" bundle:nil] forCellReuseIdentifier:@"introductionrestaurantcell"];
    sortedArr = [[NSMutableArray alloc] initWithArray: @[@"description",@"breakfast",@"lunch",@"dinner"]];
    userData = [UserDataManager getUserDataManagerInstance];
    selectedDishesList = [[NSMutableArray alloc]init];
    //add notification
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(addSelectedDish2selectedDishesList:) name:GETNOTIFICATIONADDSELECTEDDISH object:nil];
}
- (IBAction)onClickDone:(id)sender {
    UserConfigurationData *data = [UserConfigurationData getSingletonInstance];
    data.bOrderModel = NO;
    OrderHistoryData *orderHistory = [OrderHistoryData getOrderHistoryDataInstance];
    [orderHistory.curOrdrtDic setObject:restID forKey:HISTORYRESTID];
    [orderHistory.curOrdrtDic setObject:restName forKey:HISTORYORDERRESTNAME];
    [orderHistory.curOrdrtDic setObject:selectedDishesList forKey:HISTORYDISHIDLIST];
    float sum = 0.0;
    for (NSString *dishID in selectedDishesList) {
        
        for (NSDictionary *tmpDic in dishList) {
            
                if ([dishID isEqualToString:[tmpDic objectForKey:@"dishID"]] ) {
                    float price = [[tmpDic objectForKey:@"dishPrice"] floatValue];
                    sum = sum + price;
                }
            
        }
        
    }
    NSString *strSum = [[NSNumber numberWithFloat:sum] stringValue];
    [orderHistory.curOrdrtDic setObject:strSum forKey:HISTORYORDERPRICE];
    //update this dictionary to webserver, and return a unique code
    /*
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:@"Info" message:@"Are you sure whether or not you will delete the selected dishes which you ordered this time?" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* ok = [UIAlertAction actionWithTitle:@"NO" style:UIAlertActionStyleDefault handler:^(UIAlertAction* action){[alert dismissViewControllerAnimated:YES completion:nil];}];
    UIAlertAction* cancel = [UIAlertAction actionWithTitle:@"YES" style:UIAlertActionStyleDefault handler:^(UIAlertAction* action)
                             {
                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                 dispatch_async(dispatch_get_main_queue(), ^{
                                     [UserConfigurationData getSingletonInstance].bOrderModel = NO;
                                     [self.navigationController popViewControllerAnimated:YES];
                                 });
                                 
                             }
                             ];
    [alert addAction:ok];
    [alert addAction:cancel];
    [self presentViewController:alert animated:NO completion:nil];
*/
    //
    [orderHistory writeModificationintoLocalFile];
}
- (void)onClickBack:(id)sender{
    UserConfigurationData *tmp = [UserConfigurationData getSingletonInstance];
    if (tmp.bOrderModel == YES) {
        UIAlertController* alert = [UIAlertController alertControllerWithTitle:@"Info" message:@"Are you sure whether or not you will delete the selected dishes which you ordered this time?" preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* ok = [UIAlertAction actionWithTitle:@"NO" style:UIAlertActionStyleDefault handler:^(UIAlertAction* action){[alert dismissViewControllerAnimated:YES completion:nil];}];
        UIAlertAction* cancel = [UIAlertAction actionWithTitle:@"YES" style:UIAlertActionStyleDefault handler:^(UIAlertAction* action)
                                 {
                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                     dispatch_async(dispatch_get_main_queue(), ^{
                                         [UserConfigurationData getSingletonInstance].bOrderModel = NO;
                                         [self.navigationController popViewControllerAnimated:YES];
                                     });
                                     
                                 }
                            ];
        [alert addAction:ok];
        [alert addAction:cancel];
        [self presentViewController:alert animated:NO completion:nil];
    }else{
        [self.navigationController popViewControllerAnimated:YES];
    }
}
- (void)addSelectedDish2selectedDishesList:(NSNotification *)message{
    NSString *dishIDName = [message object];
    if ([selectedDishesList containsObject:dishIDName]) {
        [selectedDishesList removeObject:dishIDName];
    }else{
        [selectedDishesList addObject:dishIDName];
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (void)convertNetworkdata2SortedDictionary:(NSArray *)srcList{
    if (dishList == nil) {
        dishList = [[NSMutableArray alloc] initWithArray:srcList];
    }else{
        if ([dishList count ] > 0) {
            [dishList removeAllObjects];
            [dishList addObjectsFromArray:srcList];
        }
    }
    if (sortedDic == nil) {
        sortedDic = [[NSMutableDictionary alloc] init];
    }else{
        if ([sortedDic count ] > 0) {
            [sortedDic removeAllObjects];
        }
    }
    for (NSDictionary *dicUnit in srcList) {
        if ([[sortedDic allKeys] containsObject:[dicUnit objectForKey:@"dishType"]]) {
            [[sortedDic objectForKey:[dicUnit objectForKey:@"dishType"] ] addObject:dicUnit];
        }else{
            NSMutableArray *tmp = [[NSMutableArray alloc] init];
            [tmp addObject:dicUnit];
            [sortedDic setObject:tmp forKey:[dicUnit objectForKey:@"dishType"]];
        }
    }

}
- (NSArray *)searchDishListByRestID{
    NSMutableString *strSQL = [[NSMutableString alloc]init];
    if ([restID isEqualToString:@""] ) {
        return nil;
    }
    [strSQL appendFormat:@"select distinct * from %@ where restID = '%@' ",DATABASEDISHTABLE,restID];
    if (![strSQL isEqualToString:@""]) {
        DBManager* dbManager = [DBManager getDBManagerInstance];
        NSArray *arr = [dbManager executeQuery:strSQL];
        return arr;
    }else
        return nil;
    
}
- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    if ([userData.arrDishListByRestID containsObject:restID]) {
        NSArray *tmpArr = [self searchDishListByRestID];
        [self convertNetworkdata2SortedDictionary:tmpArr];
        [self.tableView reloadData];
    }else{
        [self downloadDishMenubyRestID];
    }
    UserConfigurationData *data = [UserConfigurationData getSingletonInstance];
    if (data.bOrderModel == YES) {
        [self.btnBarDone setEnabled:YES];
        [self.btnBarDone setTintColor: nil];
    }else{
        [self.btnBarDone setEnabled:NO];
        [self.btnBarDone setTintColor:[UIColor clearColor]];
    }
}

#pragma mark - Table view data source
- (NSInteger)getNumberofSection:(NSInteger)section{
    NSInteger count = 0;
    NSInteger nResult = 0;
    for (NSString *key in sortedArr) {
        if ([[sortedDic allKeys] containsObject:key]) {
            count++;
            if (count == section) {
                nResult = [[sortedDic objectForKey:key] count];
            }
        }
    }
    return nResult;
}
- (NSString *)getNameofSection:(NSInteger)section{
    NSInteger count = 0;
    NSString * strResult;
    for (NSString *key in sortedArr) {
        if ([[sortedDic allKeys] containsObject:key]) {
            count++;
            if (count == section) {
                strResult =key;
            }
        }
    }
    return strResult;
}
- (NSDictionary *)getInfoofIndexPath:(NSIndexPath *)indexPath{
    NSString *key = [self getNameofSection:[indexPath section]];
    NSArray *list = [sortedDic objectForKey:key];
    NSDictionary *dic = (NSDictionary *)[list objectAtIndex:[indexPath row]];
    return dic;
}
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1 + [sortedDic count];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (section == 0) {
        return 1;
    }else{
        return [self getNumberofSection:section];
    }
}
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section{
    if (section == 0) {
        return @"description";
    }else{
        return [self getNameofSection:section];
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    NSInteger section = [indexPath section];
    if (section == 0) {
        IntroductionRestaurantCell *cell =[tableView dequeueReusableCellWithIdentifier:@"introductionrestaurantcell" forIndexPath:indexPath];
        cell.introduction.text = self.introduction;
        return cell;
    }else{
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"introductiondishescell" forIndexPath:indexPath];
        NSDictionary *tmp = [self getInfoofIndexPath:indexPath];
        NSString *dishID = [tmp objectForKey:@"dishID"];
        cell.textLabel.text = dishID;
        cell.detailTextLabel.text = [NSString stringWithFormat:@"Price: $ %@",[[tmp objectForKey:@"dishPrice"] stringValue]];
        if ([selectedDishesList containsObject:dishID ]) {
            cell.accessoryType = UITableViewCellAccessoryCheckmark;
        }
        return cell;
    }
}
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{

    NSInteger section = [indexPath section];
    if (section == 0) {
        CGRect rect = [self.introduction boundingRectWithSize:CGSizeMake(CGRectGetWidth(self.view.frame)-120, MAXFLOAT)
                                                                 options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading
                                                              attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:17]} context:nil];
         return rect.size.height + 20 + 20;
    }
    return 44.0;
}
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    NSInteger nSection = [indexPath section];
    //NSInteger nRow = [indexPath row];

    if (nSection > 0) {
        NSDictionary *tmpDic = [self getInfoofIndexPath:indexPath];
        [self performSegueWithIdentifier:@"showmenudishselectedtvc" sender:tmpDic];
    }
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
    if ([[segue identifier] isEqualToString:@"showmenudishselectedtvc"]) {
        MenuDishSelectedTVC *menuDish = [segue destinationViewController];
        menuDish.dicInfo = [[NSDictionary alloc] initWithDictionary:sender];
        if ([selectedDishesList containsObject:[menuDish.dicInfo objectForKey:@"dishID"]]) {
            menuDish.bSelected = YES;
        }else
            menuDish.bSelected = NO;
    }
}


@end
